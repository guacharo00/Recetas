{"version":3,"sources":["components/AddCategories.js","helpers/fetchRecipes.js","components/RecipeGridItem.js","components/RecipeGrid.js","hooks/useFetchRecipes.js","App.js","serviceWorker.js","index.js"],"names":["AddCategories","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","ctg","className","onChange","target","value","placeholder","aria-describedby","type","id","fetchRecipes","catogory","a","url","encodeURI","fetch","resp","json","hits","recipes","map","recipe","console","log","label","title","image","ingredients","ingredientLines","uri","RecipeGridItem","src","alt","ingredient","key","RecipeGrid","category","data","loading","state","setState","useEffect","then","useFetchRecipe","App","categories","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aae2cac0.chunk.js","sourcesContent":["import React,{ useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategories = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handledInputValue = ( e ) => {\n\n        setInputValue( e.target.value )\n\n    };\n\n    const handledInputSubmit = ( e ) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ){\n            setCategories( ctg => [ inputValue, ...ctg ]);\n            setInputValue('');\n        }\n    };\n\n    return (\n        <form onSubmit={ handledInputSubmit } className=\"search-form container mb-5\">\n        <input \n            onChange={ handledInputValue } \n            className=\"search-bar form-control text-center\"\n            placeholder=\"Que quieres cosinar?\"\n            aria-describedby=\"searchHelp\" \n            type=\"text\" \n            value={ inputValue }\n        />\n        <div id=\"searchHelp\" className=\"form-text text-center\">Escribe el nombre de un ingrediente o receta.</div>\n      </form>\n    )\n}\n\nAddCategories.propTypes = {\n\n}\n\nexport default AddCategories\n","\n\nexport const fetchRecipes = async( catogory ) => {\n\n    const ID = '693523ac';\n    const API_KEY = '8a0154089e798d90648839a1da62f297';\n  \n    const url = `https://api.edamam.com/search?q=${ encodeURI( catogory ) }&app_id=${ID}&app_key=${API_KEY}`;\n\n    const resp = await fetch( url );\n    const {hits} = await resp.json();\n    const recipes = hits.map( ({recipe}) => {\n        console.log(recipe.label)\n        return {\n            title: recipe.label,\n            image: recipe.image,\n            ingredients: recipe.ingredientLines,\n            label: recipe.label,\n            uri: recipe.uri\n        }\n    })\n    console.log(recipes)\n    return recipes;\n};","import React from 'react'\n\nexport const RecipeGridItem = ({title, image, ingredients, label}) => {\n    console.log(label)\n    return (\n            <div className=\"col-md-4\">\n                <div className=\"card h-100\">\n                    <img src={image}  className=\"card-img-top\" alt=\"recipe-img\"/>\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title text-info\">{title}</h5>\n                        {ingredients.map(ingredient => (\n                            <p key={label} className=\"card-text\">{ingredient}</p>\n                        ))}\n                    </div>\n                </div>\n            </div>\n    )\n}\n\n","import React from 'react'\nimport { useFetchRecipe } from '../hooks/useFetchRecipes'\nimport { RecipeGridItem } from './RecipeGridItem';\n\nexport const RecipeGrid = ( {category} ) => {\n\n    const {data, loading} = useFetchRecipe( category );\n\n    return (\n        <div className=\"container\">\n            <h2 className=\"text-center text-info\">Recetas destacadas</h2>\n\n            {loading && <p>Cargando...</p>}\n\n            <div className=\"recipe-card row row-cols-1 row-cols-md-2 g-4\">\n                {\n                    data.map( recipe => (\n                        <RecipeGridItem\n                            key={recipe.label}\n                            {...recipe} \n                        />\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n","import {useState, useEffect} from 'react';\nimport { fetchRecipes } from '../helpers/fetchRecipes';\n\n\nexport const useFetchRecipe = ( category ) => {\n\n    const [state, setState] = useState({\n        \n        data: [],\n        loading: true\n\n    });\n\n    useEffect(() => {\n        fetchRecipes( category )\n            .then( recipe => {\n                setState({\n                    data: recipe,\n                    loading: false\n                })\n                \n            })\n    }, [category])\n\n    return state;\n    // return data;\n\n};","import React,{ useState } from 'react';\nimport AddCategories from './components/AddCategories';\n\nimport './App.css';\nimport { RecipeGrid } from './components/RecipeGrid';\n\nconst App = () => {\n\n  const [categories, setCategories] = useState(['featured']);\n\n  return (\n    <div className=\"App\">\n      <header className=\"head-wrap\">\n        <h2 className=\"sub-title\">App de recetas</h2>\n      </header>\n        <AddCategories setCategories={ setCategories }/>\n        {\n          categories.map( recipe => \n\n            <RecipeGrid\n              key={recipe}\n              category={recipe}\n            />\n\n          )\n        }\n    </div>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}